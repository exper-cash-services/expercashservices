# docker-compose.yml
# نظام EXPER CASH SERVICES - إعداد Docker Compose الكامل

version: '3.8'

services:
  # === تطبيق Node.js الرئيسي ===
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NODE_ENV: ${NODE_ENV:-production}
    container_name: exper_cash_app
    restart: unless-stopped
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - MONGODB_URI=mongodb://mongo:27017/exper_cash_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - COMPANY_ID=${COMPANY_ID:-EXPER-001}
      - COMPANY_NAME=${COMPANY_NAME:-EXPER CASH SERVICES SARL}
      - BACKUP_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL:-info}
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/app/backups
      - ./reports:/app/reports
      - ./data/app:/app/data
    networks:
      - exper_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.exper-cash.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.exper-cash.tls=true"
      - "traefik.http.routers.exper-cash.tls.certresolver=letsencrypt"
      - "traefik.http.services.exper-cash.loadbalancer.server.port=3000"

  # === قاعدة بيانات MongoDB ===
  mongo:
    image: mongo:6.0
    container_name: exper_cash_mongo
    restart: unless-stopped
    ports:
      - "${MONGO_PORT:-27017}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: exper_cash_db
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
      - ./backups/mongo:/backup
      - ./scripts/mongo:/scripts:ro
    networks:
      - exper_network
    command: [
      "mongod",
      "--auth",
      "--bind_ip_all",
      "--replSet", "rs0",
      "--oplogSize", "1024",
      "--wiredTigerCacheSizeGB", "1"
    ]
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    
  # === Redis للتخزين المؤقت ===
  redis:
    image: redis:7-alpine
    container_name: exper_cash_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - exper_network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
  # === Nginx Reverse Proxy ===
  nginx:
    image: nginx:alpine
    container_name: exper_cash_nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - ./public:/var/www/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    networks:
      - exper_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`${DOMAIN:-localhost}`)"

  # === خدمة النسخ الاحتياطية ===
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: exper_cash_backup
    restart: unless-stopped
    environment:
      - MONGODB_URI=mongodb://mongo:27017/exper_cash_db
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password123}
      - BACKUP_ENCRYPTION=${BACKUP_ENCRYPTION:-false}
      - NOTIFICATION_WEBHOOK=${NOTIFICATION_WEBHOOK:-}
    volumes:
      - ./backups:/app/backups
      - ./scripts:/app/scripts:ro
      - mongo_data:/data/db:ro
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - exper_network
    command: ["/app/scripts/backup-cron.sh"]

  # === مراقبة الأداء - Prometheus ===
  prometheus:
    image: prom/prometheus:latest
    container_name: exper_cash_prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - exper_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Grafana للرسوم البيانية ===
  grafana:
    image: grafana/grafana:latest
    container_name: exper_cash_grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/plugins:/var/lib/grafana/plugins
    networks:
      - exper_network
    profiles:
      - monitoring
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === Node Exporter لمراقبة النظام ===
  node-exporter:
    image: prom/node-exporter:latest
    container_name: exper_cash_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - exper_network
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    profiles:
      - monitoring

  # === إدارة قاعدة البيانات - Mongo Express ===
  mongo-express:
    image: mongo-express:latest
    container_name: exper_cash_mongo_express
    restart: unless-stopped
    ports:
      - "${MONGO_EXPRESS_PORT:-8081}:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ROOT_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ROOT_PASSWORD:-password123}
      ME_CONFIG_MONGODB_URL: mongodb://mongo:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASS:-admin123}
      ME_CONFIG_MONGODB_ENABLE_ADMIN: 'true'
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - exper_network
    profiles:
      - development
      - admin-tools

  # === Redis Commander ===
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: exper_cash_redis_commander
    restart: unless-stopped
    ports:
      - "${REDIS_COMMANDER_PORT:-8082}:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASS:-admin123}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - exper_network
    profiles:
      - development
      - admin-tools

  # === خدمة مراقبة السجلات ===
  log-monitor:
    image: grafana/loki:latest
    container_name: exper_cash_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - exper_network
    command: -config.file=/etc/loki/local-config.yaml
    profiles:
      - monitoring

  # === خدمة تجميع السجلات ===
  log-aggregator:
    image: grafana/promtail:latest
    container_name: exper_cash_promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/app:ro
      - nginx_logs:/var/log/nginx:ro
    networks:
      - exper_network
    command: -config.file=/etc/promtail/config.yml
    profiles:
      - monitoring
    depends_on:
      - log-monitor

  # === خدمة التنبيهات ===
  alertmanager:
    image: prom/alertmanager:latest
    container_name: exper_cash_alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - exper_network
    profiles:
      - monitoring
    depends_on:
      - prometheus

# === الشبكات ===
networks:
  exper_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    labels:
      - "com.expercash.network=main"

# === وحدات التخزين ===
volumes:
  # بيانات قاعدة البيانات
  mongo_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/mongo
  
  mongo_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/mongo-config
  
  # بيانات Redis
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  
  # بيانات المراقبة
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/grafana
  
  loki_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/loki
  
  alertmanager_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/alertmanager
  
  # سجلات Nginx
  nginx_logs:
    driver: local

# === التكوين الإضافي ===
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    labels: "service,version"

x-common-variables: &common-variables
  logging: *default-logging
  
# === ملفات التكوين الإضافية ===
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

# === قوالب الخدمات ===
x-app-defaults: &app-defaults
  restart: unless-stopped
  networks:
    - exper_network
  logging: *default-logging