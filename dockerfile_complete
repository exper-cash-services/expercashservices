# Dockerfile
# نظام EXPER CASH SERVICES - إعداد Docker الكامل

# === Multi-stage build for optimization ===
FROM node:18-alpine AS base

# إضافة metadata للصورة
LABEL maintainer="EXPER CASH SERVICES <contact@expercash.ma>"
LABEL version="2.1.0"
LABEL description="نظام إدارة العمليات المالية المتقدم"
LABEL org.opencontainers.image.title="EXPER CASH SERVICES"
LABEL org.opencontainers.image.description="Advanced Financial Operations Management System"
LABEL org.opencontainers.image.version="2.1.0"
LABEL org.opencontainers.image.created="2024-01-25"
LABEL org.opencontainers.image.revision="main"
LABEL org.opencontainers.image.vendor="EXPER CASH SERVICES SARL"

# متغيرات البناء
ARG NODE_ENV=production
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=2.1.0

# تعيين متغيرات البيئة
ENV NODE_ENV=${NODE_ENV}
ENV PORT=3000
ENV APP_DIR=/app
ENV USER_NAME=nodejs
ENV USER_UID=1001
ENV USER_GID=1001

# إضافة labels إضافية
LABEL org.opencontainers.image.created=${BUILD_DATE}
LABEL org.opencontainers.image.revision=${VCS_REF}

# إنشاء مستخدم غير root للأمان
RUN addgroup -g ${USER_GID} -S ${USER_NAME} && \
    adduser -S ${USER_NAME} -u ${USER_UID} -G ${USER_NAME}

# تثبيت الأدوات المطلوبة والتبعيات النظام
RUN apk add --no-cache \
    dumb-init \
    tzdata \
    curl \
    bash \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# تعيين المنطقة الزمنية
ENV TZ=Africa/Casablanca
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# إنشاء مجلد التطبيق
WORKDIR $APP_DIR

# === مرحلة تثبيت التبعيات ===
FROM base AS dependencies

# نسخ ملفات package للاستفادة من Docker cache
COPY package*.json ./

# تثبيت التبعيات مع تحسينات الإنتاج
RUN npm ci --only=production && \
    npm cache clean --force && \
    rm -rf /tmp/*

# === مرحلة البناء والاختبار ===
FROM base AS builder

# نسخ ملفات المشروع
COPY package*.json ./

# تثبيت جميع التبعيات (including devDependencies)
RUN npm ci --include=dev

# نسخ الكود المصدري
COPY . .

# تشغيل الاختبارات والفحص (إذا توفرت)
RUN if [ -f "package.json" ] && npm run test --if-present; then \
        echo "Tests passed"; \
    else \
        echo "No tests found or tests disabled"; \
    fi

# فحص الكود (إذا توفر)
RUN if [ -f "package.json" ] && npm run lint --if-present; then \
        echo "Linting passed"; \
    else \
        echo "No linting configured"; \
    fi

# إنشاء التوثيق التلقائي
RUN mkdir -p docs && \
    echo "# EXPER CASH SERVICES API Documentation" > docs/README.md && \
    echo "Generated on $(date)" >> docs/README.md

# === مرحلة الإنتاج ===
FROM base AS production

# تثبيت أدوات إضافية للإنتاج
RUN apk add --no-cache \
    mongodb-tools \
    redis \
    && rm -rf /var/cache/apk/*

# نسخ التبعيات من مرحلة dependencies
COPY --from=dependencies --chown=${USER_NAME}:${USER_NAME} $APP_DIR/node_modules ./node_modules

# نسخ الكود المصدري
COPY --chown=${USER_NAME}:${USER_NAME} . .

# إنشاء المجلدات المطلوبة
RUN mkdir -p \
    logs \
    uploads \
    backups \
    reports \
    temp \
    data \
    public \
    config \
    scripts \
    && chown -R ${USER_NAME}:${USER_NAME} \
        logs \
        uploads \
        backups \
        reports \
        temp \
        data \
        public \
        config \
        scripts

# إزالة الملفات غير المطلوبة
RUN rm -rf \
    .git \
    .gitignore \
    .dockerignore \
    README.md \
    docker-compose.yml \
    Dockerfile* \
    tests/ \
    .env.example \
    *.md \
    coverage/ \
    .nyc_output \
    .eslintrc.js \
    jest.config.js

# تعيين الأذونات الصحيحة
RUN chmod +x scripts/*.sh 2>/dev/null || true && \
    chmod 755 $APP_DIR && \
    find $APP_DIR -type d -exec chmod 755 {} \; && \
    find $APP_DIR -type f -exec chmod 644 {} \;

# فحص الأمان الأساسي (إذا توفرت الأدوات)
RUN if command -v npm >/dev/null 2>&1; then \
        npm audit --audit-level moderate || echo "Security audit completed with warnings"; \
    fi

# إنشاء ملف معلومات البناء
RUN echo "{ \
    \"build_date\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\", \
    \"version\": \"${VERSION}\", \
    \"node_version\": \"$(node --version)\", \
    \"npm_version\": \"$(npm --version)\", \
    \"os\": \"$(uname -s)\", \
    \"arch\": \"$(uname -m)\", \
    \"user\": \"${USER_NAME}\" \
}" > build-info.json

# التبديل للمستخدم غير root
USER ${USER_NAME}

# كشف المنفذ
EXPOSE $PORT

# إضافة متغيرات البيئة الافتراضية
ENV NODE_OPTIONS="--max-old-space-size=1024"
ENV UV_THREADPOOL_SIZE=4

# فحص صحة التطبيق
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:$PORT/api/health || exit 1

# إضافة نقطة دخول مخصصة
COPY --chown=${USER_NAME}:${USER_NAME} docker-entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# نقطة الدخول مع dumb-init للإشارات الصحيحة
ENTRYPOINT ["dumb-init", "--", "/usr/local/bin/docker-entrypoint.sh"]

# الأمر الافتراضي
CMD ["node", "server.js"]

# === Dockerfile.backup (للنسخ الاحتياطية) ===
FROM mongo:6.0 AS backup

# إضافة metadata
LABEL maintainer="EXPER CASH SERVICES <contact@expercash.ma>"
LABEL description="Backup service for EXPER CASH SERVICES"
LABEL version="1.0.0"

# تثبيت الأدوات المطلوبة
RUN apt-get update && apt-get install -y \
    cron \
    curl \
    gzip \
    tar \
    jq \
    && rm -rf /var/lib/apt/lists/*

# إنشاء مستخدم للنسخ الاحتياطي
RUN useradd -m -s /bin/bash backup

# تعيين مجلد العمل
WORKDIR /app

# نسخ نصوص النسخ الاحتياطي
COPY scripts/backup.sh /usr/local/bin/backup.sh
COPY scripts/restore.sh /usr/local/bin/restore.sh
COPY scripts/backup-cron.sh /usr/local/bin/backup-cron.sh

# تعيين الأذونات
RUN chmod +x /usr/local/bin/backup.sh && \
    chmod +x /usr/local/bin/restore.sh && \
    chmod +x /usr/local/bin/backup-cron.sh

# إنشاء مجلد النسخ الاحتياطي
RUN mkdir -p /app/backups && \
    chown -R backup:backup /app

# إعداد متغيرات البيئة
ENV BACKUP_DIR=/app/backups
ENV CRON_SCHEDULE="0 2 * * *"

# التبديل للمستخدم backup
USER backup

# كشف مجلد النسخ
VOLUME ["/app/backups"]

# الأمر الافتراضي
CMD ["/usr/local/bin/backup-cron.sh"]

# === docker-entrypoint.sh script ===
FROM scratch AS entrypoint-script
COPY <<'EOF' /docker-entrypoint.sh
#!/bin/bash
set -e

# إعدادات ألوان الإخراج
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# طباعة معلومات البداية
print_info "🚀 Starting EXPER CASH SERVICES..."
print_info "📦 Container: $(hostname)"
print_info "👤 User: $(whoami)"
print_info "🕐 Time: $(date)"
print_info "🌍 Timezone: $TZ"
print_info "⚙️  Node.js: $(node --version)"
print_info "📦 npm: $(npm --version)"

# التحقق من متغيرات البيئة المطلوبة
if [ -z "$MONGODB_URI" ]; then
    print_warning "MONGODB_URI not set, using default"
    export MONGODB_URI="mongodb://localhost:27017/exper_cash_db"
fi

if [ -z "$JWT_SECRET" ]; then
    print_warning "JWT_SECRET not set, generating random secret"
    export JWT_SECRET=$(openssl rand -base64 32)
fi

# انتظار خدمات قاعدة البيانات
if [ "$NODE_ENV" != "development" ]; then
    print_info "⏳ Waiting for database services..."
    
    # انتظار MongoDB
    until mongosh --host "${MONGODB_URI}" --eval "db.adminCommand('ping')" >/dev/null 2>&1; do
        print_info "⏳ Waiting for MongoDB..."
        sleep 2
    done
    print_success "✅ MongoDB is ready"
    
    # انتظار Redis (إذا كان مُعرَّفاً)
    if [ ! -z "$REDIS_URL" ]; then
        until redis-cli -u "$REDIS_URL" ping >/dev/null 2>&1; do
            print_info "⏳ Waiting for Redis..."
            sleep 2
        done
        print_success "✅ Redis is ready"
    fi
fi

# إنشاء المجلدات المطلوبة
print_info "📁 Creating required directories..."
mkdir -p logs uploads backups reports temp data

# فحص الصلاحيات
print_info "🔐 Checking permissions..."
if [ ! -w "logs" ]; then
    print_error "❌ Cannot write to logs directory"
    exit 1
fi

if [ ! -w "uploads" ]; then
    print_error "❌ Cannot write to uploads directory"
    exit 1
fi

print_success "✅ All permissions are correct"

# تشغيل الهجرة (إذا كانت متوفرة)
if [ -f "scripts/migrate.js" ] && [ "$NODE_ENV" = "production" ]; then
    print_info "🔄 Running database migrations..."
    node scripts/migrate.js || print_warning "Migration completed with warnings"
fi

# إنشاء البيانات التجريبية (في وضع التطوير)
if [ "$NODE_ENV" = "development" ] && [ -f "scripts/seed.js" ]; then
    print_info "🌱 Seeding database with sample data..."
    node scripts/seed.js || print_warning "Seeding completed with warnings"
fi

# معلومات النهائية
print_success "🎉 EXPER CASH SERVICES is ready!"
print_info "🌐 Application will be available on port $PORT"
print_info "📊 Health check: http://localhost:$PORT/api/health"

# تشغيل الأمر المرسل
exec "$@"
EOF

# === Dockerfile متعدد المراحل للتحسين ===
FROM production AS final

# نسخ نص نقطة الدخول
COPY --from=entrypoint-script --chown=${USER_NAME}:${USER_NAME} /docker-entrypoint.sh /usr/local/bin/

# إضافة ملف تكوين nginx (إذا كان مطلوباً)
FROM nginx:alpine AS nginx-config
COPY <<'EOF' /etc/nginx/nginx.conf
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # تحسينات الأداء
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # ضغط البيانات
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/x-javascript
        application/xml+rss
        application/javascript
        application/json;
    
    # تحسينات الأمان
    server_tokens off;
    
    # تكوين السجلات
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    include /etc/nginx/conf.d/*.conf;
}
EOF

# إضافة تكوين الخادم الافتراضي
COPY <<'EOF' /etc/nginx/conf.d/default.conf
upstream app {
    server app:3000;
    keepalive 32;
}

server {
    listen 80;
    server_name localhost;
    
    # تحسينات الأمان
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # ضغط البيانات
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # proxy للتطبيق الرئيسي
    location / {
        proxy_pass http://app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # تحسينات الأداء
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        proxy_temp_file_write_size 8k;
        
        # مهلة زمنية
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # ملفات ثابتة
    location /static/ {
        alias /var/www/html/;
        expires 1M;
        add_header Cache-Control "public, immutable";
    }
    
    # فحص الصحة
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # منع الوصول للملفات الحساسة
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}
EOF

# === ملف .dockerignore ===
FROM scratch AS dockerignore
COPY <<'EOF' /.dockerignore
# ملفات التطوير
node_modules
npm-debug.log*
.git
.gitignore
README.md
.env
.env.local
.env.*.local

# ملفات البناء
coverage/
.nyc_output
.cache
*.log

# ملفات IDE
.vscode/
.idea/
*.swp
*.swo

# ملفات النسخ الاحتياطي
backups/
*.backup

# ملفات مؤقتة
temp/
tmp/
*.tmp

# ملفات النظام
.DS_Store
Thumbs.db

# ملفات Docker
Dockerfile*
docker-compose*.yml
.dockerignore

# ملفات التوثيق
docs/
*.md

# ملفات الاختبار
test/
tests/
spec/
jest.config.js
.eslintrc.js

# ملفات البيانات
data/
uploads/
logs/
reports/
EOF
